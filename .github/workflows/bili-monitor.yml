name: bili-monitor

on:
  workflow_dispatch:
    inputs:
      keywords:
        description: '搜索关键词（多个用逗号分隔）'
        default: '詹姆斯中国行,科比,湖人'
        required: false
  schedule:
    - cron: '0 */4 * * *'  # 每4小时自动运行

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install playwright@1.46.0
          npx playwright install --with-deps chromium

      - name: Run monitoring script
        env:
          KEYWORDS: ${{ github.event.inputs.keywords || '詹姆斯中国行,科比,湖人' }}
        run: |
          cat > monitor.js << 'SCRIPT'
          const { chromium } = require('playwright');
          const fs = require('fs');
          const path = require('path');

          // 从 Colab 经验中学到的所有反检测技巧
          async function stealthSetup(page) {
            await page.addInitScript(() => {
              // 1. 隐藏 webdriver 特征
              Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined
              });
              
              // 2. 添加 chrome 对象
              window.chrome = {
                runtime: {},
                loadTimes: function() {},
                csi: function() {},
                app: {}
              };
              
              // 3. 修正语言
              Object.defineProperty(navigator, 'languages', {
                get: () => ['zh-CN', 'zh', 'en-US', 'en']
              });
              
              // 4. 修正插件数组
              Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5]
              });
              
              // 5. 修正权限 API
              const originalQuery = window.navigator.permissions.query;
              window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                  Promise.resolve({ state: Notification.permission }) :
                  originalQuery(parameters)
              );
              
              // 6. WebGL 指纹
              const getParameter = WebGLRenderingContext.prototype.getParameter;
              WebGLRenderingContext.prototype.getParameter = function(parameter) {
                if (parameter === 37445) return 'Intel Inc.';
                if (parameter === 37446) return 'Intel Iris OpenGL Engine';
                return getParameter.call(this, parameter);
              };
            });
          }

          async function monitorKeyword(keyword) {
            console.log(`\n========== 监测关键词: ${keyword} ==========`);
            
            const browser = await chromium.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--disable-features=IsolateOrigins,site-per-process'
              ]
            });

            try {
              const context = await browser.newContext({
                locale: 'zh-CN',
                timezoneId: 'Asia/Shanghai',
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport: { width: 1920, height: 1080 },
                deviceScaleFactor: 1,
                hasTouch: false,
                isMobile: false
              });

              const page = await context.newPage();
              await stealthSetup(page);

              const url = `https://search.bilibili.com/all?keyword=${encodeURIComponent(keyword)}&from_source=webtop_search&order=totalrank`;
              console.log('访问:', url);
              
              await page.goto(url, { 
                waitUntil: 'domcontentloaded',
                timeout: 60000 
              });

              // 等待页面稳定
              await page.waitForTimeout(3000);

              // 尝试多个可能的选择器
              const selectors = [
                'div.bili-video-card',
                'div.video-list div.bili-video-card',
                '.video-list .bili-video-card'
              ];

              let foundSelector = null;
              for (const selector of selectors) {
                try {
                  await page.waitForSelector(selector, { timeout: 5000 });
                  foundSelector = selector;
                  console.log(`找到视频卡片选择器: ${selector}`);
                  break;
                } catch (e) {
                  console.log(`选择器 ${selector} 未找到，尝试下一个...`);
                }
              }

              // 模拟人类滚动行为
              console.log('开始滚动加载更多内容...');
              for (let i = 0; i < 3; i++) {
                await page.evaluate(() => {
                  window.scrollBy(0, window.innerHeight * 0.8);
                });
                await page.waitForTimeout(1500 + Math.random() * 1000);
              }

              // 保存截图和数据
              const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
              const screenshotDir = 'screenshots';
              const dataDir = 'data';
              
              if (!fs.existsSync(screenshotDir)) fs.mkdirSync(screenshotDir, { recursive: true });
              if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir, { recursive: true });

              const screenshotPath = path.join(screenshotDir, `${keyword}_${timestamp}.png`);
              await page.screenshot({ path: screenshotPath, fullPage: true });
              console.log(`截图已保存: ${screenshotPath}`);

              // 提取数据
              const videos = foundSelector ? await page.$$(foundSelector) : [];
              console.log(`找到 ${videos.length} 个视频`);

              const results = [];
              for (const video of videos.slice(0, 50)) {
                try {
                  const data = await video.evaluate(el => {
                    const titleEl = el.querySelector('h3.bili-video-card__info--tit');
                    const linkEl = el.querySelector('a');
                    const upEl = el.querySelector('.bili-video-card__info--author');
                    const statsEls = el.querySelectorAll('.bili-video-card__stats--item');

                    return {
                      title: titleEl?.getAttribute('title') || titleEl?.innerText?.trim() || '',
                      link: linkEl?.href || '',
                      up: upEl?.innerText?.trim() || '',
                      views: statsEls[0]?.innerText?.trim() || 'N/A',
                      danmaku: statsEls[1]?.innerText?.trim() || 'N/A'
                    };
                  });

                  if (data.title && data.link) {
                    results.push(data);
                  }
                } catch (e) {
                  // 忽略单个元素的错误
                }
              }

              // 保存JSON数据
              const jsonPath = path.join(dataDir, `${keyword}_${timestamp}.json`);
              fs.writeFileSync(jsonPath, JSON.stringify({
                keyword,
                timestamp,
                count: results.length,
                videos: results
              }, null, 2));
              console.log(`数据已保存: ${jsonPath} (${results.length} 条)`);

              // 如果没有找到数据，保存HTML用于调试
              if (results.length === 0) {
                const htmlPath = path.join(dataDir, `${keyword}_${timestamp}.html`);
                const html = await page.content();
                fs.writeFileSync(htmlPath, html);
                console.log(`未找到视频，已保存HTML: ${htmlPath}`);
              }

              await browser.close();
              return { keyword, count: results.length, results };

            } catch (error) {
              console.error(`监测 ${keyword} 时出错:`, error);
              await browser.close();
              return { keyword, count: 0, error: error.message };
            }
          }

          // 主函数
          (async () => {
            const keywords = process.env.KEYWORDS.split(',').map(k => k.trim()).filter(Boolean);
            console.log('开始监测以下关键词:', keywords);

            const allResults = [];
            for (const keyword of keywords) {
              const result = await monitorKeyword(keyword);
              allResults.push(result);
              
              // 关键词之间暂停，避免请求过快
              if (keywords.indexOf(keyword) < keywords.length - 1) {
                console.log('暂停 5 秒后继续下一个关键词...');
                await new Promise(resolve => setTimeout(resolve, 5000));
              }
            }

            // 生成汇总报告
            const reportPath = 'monitor_report.json';
            fs.writeFileSync(reportPath, JSON.stringify({
              run_time: new Date().toISOString(),
              keywords: keywords,
              summary: allResults.map(r => ({
                keyword: r.keyword,
                video_count: r.count,
                status: r.error ? 'failed' : 'success',
                error: r.error
              }))
            }, null, 2));
            
            console.log('\n========== 监测完成 ==========');
            console.log(`汇总报告已保存: ${reportPath}`);
          })();
          SCRIPT

          node monitor.js

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: monitor-results-${{ github.run_number }}
          path: |
            data/
            screenshots/
            monitor_report.json

      - name: Commit results (optional)
        continue-on-error: true
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/ screenshots/ monitor_report.json 2>/dev/null || true
          git commit -m "监测更新: $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes"
          git push || echo "Push failed"
